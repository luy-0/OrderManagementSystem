<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.orderManagement.dao.ComplaintMapper">
  <resultMap id="BaseResultMap" type="cn.orderManagement.bean.Complaint">
    <id column="complaint_id" jdbcType="INTEGER" property="complaintId" />
    <result column="is_handled" jdbcType="BIT" property="isHandled" />
    <result column="manager_id" jdbcType="INTEGER" property="managerId" />
    <result column="employee_id" jdbcType="INTEGER" property="employeeId" />
    <result column="merchant_id" jdbcType="INTEGER" property="merchantId" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.orderManagement.bean.ComplaintWithBLOBs">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
    <result column="result" jdbcType="LONGVARCHAR" property="result" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    complaint_id, is_handled, manager_id, employee_id, merchant_id
  </sql>
  <sql id="Blob_Column_List">
    content, result
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.orderManagement.bean.ComplaintExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from complaint
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.orderManagement.bean.ComplaintExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from complaint
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from complaint
    where complaint_id = #{complaintId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from complaint
    where complaint_id = #{complaintId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.orderManagement.bean.ComplaintExample">
    delete from complaint
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.orderManagement.bean.ComplaintWithBLOBs">
    insert into complaint (complaint_id, is_handled, manager_id, 
      employee_id, merchant_id, content, 
      result)
    values (#{complaintId,jdbcType=INTEGER}, #{isHandled,jdbcType=BIT}, #{managerId,jdbcType=INTEGER}, 
      #{employeeId,jdbcType=INTEGER}, #{merchantId,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR}, 
      #{result,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.orderManagement.bean.ComplaintWithBLOBs">
    insert into complaint
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="complaintId != null">
        complaint_id,
      </if>
      <if test="isHandled != null">
        is_handled,
      </if>
      <if test="managerId != null">
        manager_id,
      </if>
      <if test="employeeId != null">
        employee_id,
      </if>
      <if test="merchantId != null">
        merchant_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="result != null">
        result,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="complaintId != null">
        #{complaintId,jdbcType=INTEGER},
      </if>
      <if test="isHandled != null">
        #{isHandled,jdbcType=BIT},
      </if>
      <if test="managerId != null">
        #{managerId,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="merchantId != null">
        #{merchantId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="result != null">
        #{result,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.orderManagement.bean.ComplaintExample" resultType="java.lang.Long">
    select count(*) from complaint
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update complaint
    <set>
      <if test="record.complaintId != null">
        complaint_id = #{record.complaintId,jdbcType=INTEGER},
      </if>
      <if test="record.isHandled != null">
        is_handled = #{record.isHandled,jdbcType=BIT},
      </if>
      <if test="record.managerId != null">
        manager_id = #{record.managerId,jdbcType=INTEGER},
      </if>
      <if test="record.employeeId != null">
        employee_id = #{record.employeeId,jdbcType=INTEGER},
      </if>
      <if test="record.merchantId != null">
        merchant_id = #{record.merchantId,jdbcType=INTEGER},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.result != null">
        result = #{record.result,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update complaint
    set complaint_id = #{record.complaintId,jdbcType=INTEGER},
      is_handled = #{record.isHandled,jdbcType=BIT},
      manager_id = #{record.managerId,jdbcType=INTEGER},
      employee_id = #{record.employeeId,jdbcType=INTEGER},
      merchant_id = #{record.merchantId,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR},
      result = #{record.result,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update complaint
    set complaint_id = #{record.complaintId,jdbcType=INTEGER},
      is_handled = #{record.isHandled,jdbcType=BIT},
      manager_id = #{record.managerId,jdbcType=INTEGER},
      employee_id = #{record.employeeId,jdbcType=INTEGER},
      merchant_id = #{record.merchantId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.orderManagement.bean.ComplaintWithBLOBs">
    update complaint
    <set>
      <if test="isHandled != null">
        is_handled = #{isHandled,jdbcType=BIT},
      </if>
      <if test="managerId != null">
        manager_id = #{managerId,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        employee_id = #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="merchantId != null">
        merchant_id = #{merchantId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="result != null">
        result = #{result,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where complaint_id = #{complaintId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.orderManagement.bean.ComplaintWithBLOBs">
    update complaint
    set is_handled = #{isHandled,jdbcType=BIT},
      manager_id = #{managerId,jdbcType=INTEGER},
      employee_id = #{employeeId,jdbcType=INTEGER},
      merchant_id = #{merchantId,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR},
      result = #{result,jdbcType=LONGVARCHAR}
    where complaint_id = #{complaintId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.orderManagement.bean.Complaint">
    update complaint
    set is_handled = #{isHandled,jdbcType=BIT},
      manager_id = #{managerId,jdbcType=INTEGER},
      employee_id = #{employeeId,jdbcType=INTEGER},
      merchant_id = #{merchantId,jdbcType=INTEGER}
    where complaint_id = #{complaintId,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithBLOBsWithRowbounds" parameterType="cn.orderManagement.bean.ComplaintExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from complaint
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleWithRowbounds" parameterType="cn.orderManagement.bean.ComplaintExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from complaint
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>